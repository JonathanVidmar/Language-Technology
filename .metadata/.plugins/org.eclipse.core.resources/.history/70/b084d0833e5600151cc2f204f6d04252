import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Tokenizer{
	
	static String[] words = new String[0];
	
	public static void main(String[] args) throws IOException {
        FileReader reader = new FileReader();
        String text = reader.readFile(args[0]);
        Tokenizer tokenizer = new Tokenizer();
        String normalized = tokenizer.tokenizeSentence(text);
        
        words = tokenizer.tokenize(normalized);
        
        /*
        WordCounter wc = new WordCounter();
        Map<String, Integer> unigramCounts = wc.count(words);
        Map<String, Integer> bigramCounts = wc.countBigrams(words);

        MutualInfo mi = new MutualInfo();
        Map<String, Double> miScores = mi.compute(words.length, unigramCounts, bigramCounts);
        for (String bigram : miScores.keySet()) {
            String[] pair = bigram.split("\t");
            System.out.println(miScores.get(bigram) + "\t" + bigram + "\t" + bigramCounts.get(bigram) + "\t" + unigramCounts.get(pair[0]) + "\t" + unigramCounts.get(pair[1]));
        }
        */
    }
	
    /*
    String replaceNewLine(String text) {
        return text.replaceAll("\\s+", " ");
    }
    */
    String[] tokenize(String text) {
        String[] words = text.split("\\s+");
        return words;
    }
    
    String tokenizeSentence(String text) {
    	
    	Pattern pattern = Pattern.compile("([\\\\sA-ZÅÄÖ]+[^.!?]*[.!?])");
    	Matcher matcher = pattern.matcher(text);
        StringBuilder s = new StringBuilder();
    	while (matcher.find()) {
    		String sentence = matcher.group().toLowerCase();
    		String modifiedSentence = "<s> " + sentence.replaceAll("[\\.,!?;:\"]", " ") + "</s> ";
    		s.append(modifiedSentence);
        }
    	return s.toString();
    }
    
    Map<String, Double> compute(int N, Map<String, Integer> unigramCounts, Map<String, Integer> bigramCounts) {
        Map<String, Double> miScores = new TreeMap<>();

        for (String bigram : bigramCounts.keySet()) {
            String[] pair = bigram.split("\t");
            double mi = Math.log((double) N * bigramCounts.get(bigram) / (unigramCounts.get(pair[0]) * unigramCounts.get(pair[1]))) / Math.log(2.0);
            miScores.put(bigram, mi);
        }
        return miScores;
    }
}









